<slot></slot>

<script>
  class TargetToggler extends HTMLElement {
    connectedCallback() {
      this.setupToggle();
      if (!this.visible) this.target.setAttribute("hidden", "");
    }

    setupToggle() {
      this.toggle = this.querySelector("button");

      if (!this.toggle) {
        throw new Error(`${this.tagName} must contain a <button> element.`);
      }

      this.toggle.setAttribute("aria-expanded", this.visible);
      this.toggle.setAttribute("aria-controls", this.controls);
      this.toggle.addEventListener("click", this.handleClick.bind(this));
    }

    handleClick() {
      let expanded = this.toggle.getAttribute("aria-expanded") === "true" || false;

      this.toggle.setAttribute("aria-expanded", !expanded);
      this.target.toggleAttribute("hidden", expanded);
    }

    get controls() {
      const attr = this.getAttribute("controls");

      if (!attr) {
        throw new Error(`${this.tagName} requires a "controls" attribute set to an element id`);
      }

      return attr;
    }

    get target() {
      const el = document.getElementById(this.controls);

      if (!el) {
        throw new Error(`${this.tagName} cannot find element with id "${this.controls}".`);
      }

      return el;
    }

    get visible() {
      const attr = "target-visible";
      return (this.hasAttribute(attr) && this.getAttribute(attr) !== "false") || false;
    }
  }

  if ("customElements" in window) {
    window.customElements.define("target-toggler", TargetToggler);
  }
</script>

<style>
  target-toggler {
    display: inline-block;
  }
</style>
